<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VoyageExcercise</name>
    </assembly>
    <members>
        <member name="T:VoyageExcercise.Controllers.CrudController">
            <summary>
            Services Controller
            </summary>
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.#ctor(VoyageExcercise.DAL.AppDBContext,VoyageExcercise.Interfaces.IServices)">
            <summary>
            Local Database services Instances
            </summary>
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.GetAllTransactions(System.Int32,System.Int32)">
            <summary>
            Get all the transactions from db.
            </summary>
            <returns>A Transactions List</returns>    
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.GetTransaction(System.Int32)">
            <summary>
            Get a transaction from db.
            </summary>
            <returns>A Transaction data model</returns>
            <response code="200">Returns the transaction data model</response>
            <response code="400">If the transaction id is incorrect</response>
            <response code="404">If the transaction doesn't exist</response>
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.AddTransaction(VoyageExcercise.Models.TransactionRequest,System.Int32)">
            <summary>
            Add a transaction to the db.
            </summary>
            <returns>A Transaction data model</returns>
            <response code="201">If the transaction was created returns the transaction data model</response>
            <response code="304">If the transaction was not created</response>
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.EditTransaction(VoyageExcercise.Models.TransactionRequest,System.Int32)">
            <summary>
            Edit a transaction from db.
            </summary>
            <returns>A Transaction data model</returns>
            <response code="201">If the transaction was edite returns the transaction data model</response>
            <response code="304">If the transaction was not edited</response>
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.DeleteTransaction(System.Int32)">
            <summary>
            Delete a transaction from db.
            </summary>
            <returns>A Transaction data model</returns>
            <response code="201">If the transaction was deleted returns the transaction data model</response>
            <response code="304">If the transaction was not deleted</response>
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.GetAllPayments(System.Int32,System.Int32)">
            <summary>
            Get all the payments from db.
            </summary>
            <returns>A Payment List</returns>    
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.GetPayment(System.Int32)">
            <summary>
            Get a payment from db.
            </summary>
            <returns>A Payment data model</returns>
            <response code="200">Returns the payment data model</response>
            <response code="400">If the payment id is incorrect</response>
            <response code="404">If the payment doesn't exist</response>
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.AddPayment(VoyageExcercise.Models.PaymentRequest)">
            <summary>
            Add a payment to the db.
            </summary>
            <returns>A Payment data model</returns>
            <response code="201">If the payment was created returns the payment data model</response>
            <response code="304">If the payment was not created</response>
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.EditPayment(VoyageExcercise.Models.PaymentRequest,System.Int32)">
            <summary>
            Edit a payment from db.
            </summary>
            <returns>A Payment data model</returns>
            <response code="201">If the payment was edited returns true</response>
            <response code="304">If the payment was not edited</response>
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.DeletePayment(System.Int32)">
            <summary>
            Delete a payment from db.
            </summary>
            <returns>A Payment data model</returns>
            <response code="201">If the payment was deleted returns true</response>
            <response code="304">If the payment was not deleted</response>
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.GetAllServices(System.Int32,System.Int32)">
            <summary>
            Get all the services from db.
            </summary>
            <returns>A Service List</returns>    
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.GetService(System.Int32)">
            <summary>
            Get a service from db.
            </summary>
            <returns>A Service data model</returns>
            <response code="200">Returns the service data model</response>
            <response code="400">If the service id is incorrect</response>
            <response code="404">If the service doesn't exist</response>
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.addService(System.String)">
            <summary>
            Add a service to the db.
            </summary>
            <returns>A Service data model</returns>
            <response code="201">If the service was created returns the service data model</response>
            <response code="304">If the service was not created</response>
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.EditService(System.String,System.Int32)">
            <summary>
            Edit a service from db.
            </summary>
            <returns>A Service data model</returns>
            <response code="201">If the service was edited returns true</response>
            <response code="304">If the service was not edited</response>
        </member>
        <member name="M:VoyageExcercise.Controllers.CrudController.DeleteService(System.Int32)">
            <summary>
            Delete a service from db.
            </summary>
            <returns>A Service data model</returns>
            <response code="201">If the service was service returns true</response>
            <response code="304">If the service was not deleted</response>
        </member>
        <member name="M:VoyageExcercise.Controllers.InvoicesController.#ctor(VoyageExcercise.DAL.AppDBContext,VoyageExcercise.Interfaces.IInvoice,VoyageExcercise.Interfaces.IServices)">
            <summary>
            Local Database services Instances
            </summary>
        </member>
        <member name="M:VoyageExcercise.Controllers.InvoicesController.GenInvoice(System.Int32,System.Int32)">
            <summary>
            Generate all the invoices from db.
            </summary>
            <returns>A Transactions List</returns>    
        </member>
        <member name="M:VoyageExcercise.Controllers.InvoicesController.GetInvoice(System.Int32)">
            <summary>
            Get an invoice by id
            </summary>
            <response code="200">Returns the invoice data model</response>
            <response code="400">If the transaction id is incorrect</response>
            <response code="404">If the transaction doesn't exist</response>
        </member>
        <member name="M:VoyageExcercise.Controllers.InvoicesController.GenerateTransactionWithPayment(VoyageExcercise.Models.PaymentWTransactionRequest)">
            <summary>
            An example of a transaction with a generated payment 
            </summary>
            <response code="200">Returns the transaction data model</response>
            <response code="500">If something went wrong making the transaction payment</response>
            <returns>An http response with the result of the query</returns>
        </member>
        <member name="M:VoyageExcercise.Controllers.InvoicesController.UpdateTransaction(System.Int32,VoyageExcercise.Models.PaymentRequest)">
            <summary>
            Updates a transaction payment
            </summary>
            <response code="200">Returns the new transaction data model</response>
            <response code="500">If something went wrong making the transaction update</response>
            <returns>A transaction model updated</returns>
        </member>
        <member name="T:VoyageExcercise.DAL.AppDBContext">
            <summary>
            Application Databse Context (voyagedb)
            </summary>
        </member>
        <member name="M:VoyageExcercise.DAL.AppDBContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Local Database
            </summary>
        </member>
        <member name="P:VoyageExcercise.DAL.AppDBContext.Transactions">
            <summary>
            Transactions Dataset
            </summary>
        </member>
        <member name="P:VoyageExcercise.DAL.AppDBContext.Payments">
            <summary>
            Payments Dataset
            </summary>
        </member>
        <member name="P:VoyageExcercise.DAL.AppDBContext.CServices">
            <summary>
            CServices Dataset
            </summary>
        </member>
        <member name="T:VoyageExcercise.DAL.Models.CServices">
            <summary>
            CService Model
            </summary>
        </member>
        <member name="T:VoyageExcercise.DAL.Models.Payments">
            <summary>
            Payments Model
            </summary>
        </member>
        <member name="T:VoyageExcercise.DAL.Models.Transactions">
            <summary>
            Transactions Model
            </summary>
        </member>
        <member name="M:VoyageExcercise.Helpers.InvoiceHelper.GetInvoices(VoyageExcercise.DAL.AppDBContext,System.Int32,System.Int32)">
            <summary>
            Method <c>GetInvoices</c> Get a list of the invoices from db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="page">Number of the page</param>
            <param name="pagesize">Number of elements of that page</param>
            <returns>An Invoce list</returns>
        </member>
        <member name="M:VoyageExcercise.Helpers.InvoiceHelper.GetInvoice(VoyageExcercise.DAL.AppDBContext,System.Int32)">
            <summary>
            Method <c>GetInvoice</c> Get an invoice by id.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="transaction_id">Transaction id</param>
            <returns>An Invoce data model</returns>
        </member>
        <member name="T:VoyageExcercise.Helpers.ServicesHelper">
            <summary>
            Services methods
            </summary>
        </member>
        <member name="M:VoyageExcercise.Helpers.ServicesHelper.AddTransaction(VoyageExcercise.DAL.AppDBContext,VoyageExcercise.Models.TransactionRequest,System.Int32)">
            <summary>
            Method <c>AddTransaction</c> Store a transaction in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="request">TransactionRequest data model</param>
            <param name="payment_id">The Payment Id</param>
            <returns>true if the transaction was added, false if the update fails</returns>
        </member>
        <member name="M:VoyageExcercise.Helpers.ServicesHelper.DeleteTransaction(VoyageExcercise.DAL.AppDBContext,System.Int32)">
            <summary>
            Method <c>DeleteTransaction</c> Delete a transaction stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="transaction_id">The Transaction ID yout want to delete</param>
            <returns>true if the transaction was deleted, false if the delete fails</returns>
        </member>
        <member name="M:VoyageExcercise.Helpers.ServicesHelper.EditTransaction(VoyageExcercise.DAL.AppDBContext,VoyageExcercise.Models.TransactionRequest,System.Int32)">
            <summary>
            Method <c>EditTransaction</c> Update a transaction stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="request">TransactionRequest data model with the new data</param>
            <param name="transaction_id">The Transaction ID yout want to edit</param>
            <returns> true if the transaction was saved, false if the update fails</returns>
        </member>
        <member name="M:VoyageExcercise.Helpers.ServicesHelper.GetAllTransactions(VoyageExcercise.DAL.AppDBContext,System.Int32,System.Int32)">
            <summary>
            Method <c>GetAllTransactions</c> Get a list of the transactions raw data stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="page">Number of the page</param>
            <param name="pagesize">Number of elements of that page</param>
            <returns>A Transactions list</returns>
        </member>
        <member name="M:VoyageExcercise.Helpers.ServicesHelper.GetTransaction(VoyageExcercise.DAL.AppDBContext,System.Int32)">
            <summary>
            Method <c>GetTransaction</c> Get an specific transaction stored in db
            </summary>
            <param name="context">Application Database Context</param>
            <param name="transaction_id">The Transaction Id you want to get</param>
            <returns>Transaction data model</returns>
        </member>
        <member name="M:VoyageExcercise.Helpers.ServicesHelper.GetAllPayments(VoyageExcercise.DAL.AppDBContext,System.Int32,System.Int32)">
            <summary>
            Method <c>GetAllPayments</c> Get a list of the payments data stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="page">Number of the page</param>
            <param name="pagesize">Number of elements of that page</param>
            <returns>A Payment list</returns>
        </member>
        <member name="M:VoyageExcercise.Helpers.ServicesHelper.GetPayment(VoyageExcercise.DAL.AppDBContext,System.Int32)">
            <summary>
            Method <c>GetPayment</c> Get an specific payment stored in db
            </summary>
            <param name="context">Application Database Context</param>
            <param name="payment_id">The Transaction Id you want to get</param>
            <returns>Payment data model</returns>
        </member>
        <member name="M:VoyageExcercise.Helpers.ServicesHelper.AddPayment(VoyageExcercise.DAL.AppDBContext,VoyageExcercise.Models.PaymentRequest)">
            <summary>
            Method <c>AddPayment</c> Store a payment in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="request">PaymentRequest data model</param>
            <returns> true if the payment was added, false if the update fails</returns>
        </member>
        <member name="M:VoyageExcercise.Helpers.ServicesHelper.EditPayment(VoyageExcercise.DAL.AppDBContext,VoyageExcercise.Models.PaymentRequest,System.Int32)">
            <summary>
            Method <c>EditPayment</c> Update a payment stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="request">PaymentRequest data model with the new data</param>
            <param name="payment_id">The payment ID yout want to edit</param>
            <returns> true if the payment was saved, false if the update fails</returns>
        </member>
        <member name="M:VoyageExcercise.Helpers.ServicesHelper.DeletePayment(VoyageExcercise.DAL.AppDBContext,System.Int32)">
            <summary>
            Method <c>DeletePayment</c> Delete a payment stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="payment_id">The Payment ID yout want to delete</param>
            <returns> true if the payment was deleted, false if the delete fails</returns>
        </member>
        <member name="M:VoyageExcercise.Helpers.ServicesHelper.GetAllServices(VoyageExcercise.DAL.AppDBContext,System.Int32,System.Int32)">
            <summary>
            Method <c>GetAllServices</c> Get a list of the services data stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="page">Number of the page</param>
            <param name="pagesize">Number of elements of that page</param>
            <returns>A Services list</returns>
        </member>
        <member name="M:VoyageExcercise.Helpers.ServicesHelper.GetService(VoyageExcercise.DAL.AppDBContext,System.Int32)">
            <summary>
            Method <c>GetService</c> Get an specific service stored in db
            </summary>
            <param name="context">Application Database Context</param>
            <param name="service_id">The Transaction Id you want to get</param>
            <returns>Payment data model</returns>
        </member>
        <member name="M:VoyageExcercise.Helpers.ServicesHelper.AddService(VoyageExcercise.DAL.AppDBContext,System.String)">
            <summary>
            Method <c>AddService</c> Store a service in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="service_name">name of the service you want to bind</param>
            <returns> true if the service was added, false if the update fails</returns>
        </member>
        <member name="M:VoyageExcercise.Helpers.ServicesHelper.EditService(VoyageExcercise.DAL.AppDBContext,System.String,System.Int32)">
            <summary>
            Method <c>EditService</c> Update a service stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="service_name">The new service name</param>
            <param name="service_id">The service ID yout want to edit</param>
            <returns> true if the service was saved, false if the update fails</returns>
        </member>
        <member name="M:VoyageExcercise.Helpers.ServicesHelper.DeleteService(VoyageExcercise.DAL.AppDBContext,System.Int32)">
            <summary>
            Method <c>DeleteService</c> Delete a service stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="service_id">The service ID yout want to delete</param>
            <returns> true if the service was deleted, false if the delete fails</returns>
        </member>
        <member name="T:VoyageExcercise.Interfaces.IInvoice">
            <summary>
            Invoice interface
            </summary>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IInvoice.GetInvoices(VoyageExcercise.DAL.AppDBContext,System.Int32,System.Int32)">
            <summary>
            Method <c>GetInvoices</c> Get a list of the invoices from db.
            </summary>
            <param name="context">Application Database Context</param>
            <returns>An Invoce list</returns>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IInvoice.GetInvoice(VoyageExcercise.DAL.AppDBContext,System.Int32)">
            <summary>
            Method <c>GetInvoice</c> Get an invoice by id.
            </summary>
            <param name="context">Application Database Context</param>
            <returns>An Invoce data model</returns>
        </member>
        <member name="T:VoyageExcercise.Interfaces.IServices">
            <summary>
            Service Interface
            </summary>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IServices.GetAllTransactions(VoyageExcercise.DAL.AppDBContext,System.Int32,System.Int32)">
            <summary>
            Method <c>GetAllTransactions</c> Get a list of the transactions raw data stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <returns>A Transaction list</returns>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IServices.GetTransaction(VoyageExcercise.DAL.AppDBContext,System.Int32)">
            <summary>
            Method <c>GetTransaction</c> Get an specific transaction stored in db
            </summary>
            <param name="context">Application Database Context</param>
            <param name="transaction_id">The Transaction Id you want to get</param>
            <returns>Transaction data model</returns>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IServices.AddTransaction(VoyageExcercise.DAL.AppDBContext,VoyageExcercise.Models.TransactionRequest,System.Int32)">
            <summary>
            Method <c>AddTransaction</c> Store a transaction in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="request">TransactionRequest data model</param>
            <param name="payment_id">The Payment Id</param>
            <returns> true if the transaction was added, false if the update fails</returns>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IServices.EditTransaction(VoyageExcercise.DAL.AppDBContext,VoyageExcercise.Models.TransactionRequest,System.Int32)">
            <summary>
            Method <c>EditTransaction</c> Update a transaction stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="request">TransactionRequest data model with the new data</param>
            <param name="transaction_id">The Transaction ID yout want to edit</param>
            <returns> true if the transaction was saved, false if the update fails</returns>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IServices.DeleteTransaction(VoyageExcercise.DAL.AppDBContext,System.Int32)">
            <summary>
            Method <c>DeleteTransaction</c> Delete a transaction stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="transaction_id">The Transaction ID yout want to delete</param>
            <returns> true if the transaction was deleted, false if the delete fails</returns>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IServices.GetAllPayments(VoyageExcercise.DAL.AppDBContext,System.Int32,System.Int32)">
            <summary>
            Method <c>GetAllPayments</c> Get a list of the payments data stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <returns>A Payment list</returns>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IServices.GetPayment(VoyageExcercise.DAL.AppDBContext,System.Int32)">
            <summary>
            Method <c>GetPayment</c> Get an specific payment stored in db
            </summary>
            <param name="context">Application Database Context</param>
            <param name="payment_id">The Payment Id you want to get</param>
            <returns>Payment data model</returns>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IServices.AddPayment(VoyageExcercise.DAL.AppDBContext,VoyageExcercise.Models.PaymentRequest)">
            <summary>
            Method <c>AddPayment</c> Store a payment in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="request">PaymentRequest data model</param>
            <returns> true if the payment was added, false if the update fails</returns>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IServices.EditPayment(VoyageExcercise.DAL.AppDBContext,VoyageExcercise.Models.PaymentRequest,System.Int32)">
            <summary>
            Method <c>EditPayment</c> Update a payment stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="request">PaymentRequest data model with the new data</param>
            <param name="payment_id">The payment ID yout want to edit</param>
            <returns> true if the payment was saved, false if the update fails</returns>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IServices.DeletePayment(VoyageExcercise.DAL.AppDBContext,System.Int32)">
            <summary>
            Method <c>DeletePayment</c> Delete a payment stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="payment_id">The Payment ID yout want to delete</param>
            <returns> true if the payment was deleted, false if the delete fails</returns>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IServices.GetAllServices(VoyageExcercise.DAL.AppDBContext,System.Int32,System.Int32)">
            <summary>
            Method <c>GetAllServices</c> Get a list of the services data stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <returns>A Services list</returns>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IServices.GetService(VoyageExcercise.DAL.AppDBContext,System.Int32)">
            <summary>
            Method <c>GetService</c> Get an specific service stored in db
            </summary>
            <param name="context">Application Database Context</param>
            <param name="service_id">The Transaction Id you want to get</param>
            <returns>Payment data model</returns>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IServices.AddService(VoyageExcercise.DAL.AppDBContext,System.String)">
            <summary>
            Method <c>AddService</c> Store a service in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="service_name">name of the service you want to bind</param>
            <returns> true if the service was added, false if the update fails</returns>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IServices.EditService(VoyageExcercise.DAL.AppDBContext,System.String,System.Int32)">
            <summary>
            Method <c>EditService</c> Update a service stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="service_name">The new service name</param>
            <param name="service_id">The service ID yout want to edit</param>
            <returns> true if the service was saved, false if the update fails</returns>
        </member>
        <member name="M:VoyageExcercise.Interfaces.IServices.DeleteService(VoyageExcercise.DAL.AppDBContext,System.Int32)">
            <summary>
            Method <c>DeleteService</c> Delete a service stored in the db.
            </summary>
            <param name="context">Application Database Context</param>
            <param name="service_id">The service ID yout want to delete</param>
            <returns> true if the service was deleted, false if the delete fails</returns>
        </member>
        <member name="T:VoyageExcercise.Models.TransactionRequest">
            <summary>
            Transaction Request Model
            </summary>
        </member>
        <member name="T:VoyageExcercise.Models.PaymentRequest">
            <summary>
            Payment Request Model
            </summary>
        </member>
        <member name="T:VoyageExcercise.Models.PaymentWTransactionRequest">
            <summary>
            An example of a transaction with a payment in one model
            </summary>
        </member>
    </members>
</doc>
